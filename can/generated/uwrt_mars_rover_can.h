/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 36.2.0 Sat Mar 20 20:48:34 2021.
 */

#ifndef UWRT_MARS_ROVER_CAN_H
#define UWRT_MARS_ROVER_CAN_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define UWRT_MARS_ROVER_CAN_ALL_SWITCH_CAN_BUS_FRAME_ID (0x0eu)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_ACK_FRAME_ID (0x04u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_FRAME_ID (0x03u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_FRAME_ID (0x00u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_MOTION_DATA_FRAME_ID (0x01u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_PID_PARAMS_FRAME_ID (0x02u)
#define UWRT_MARS_ROVER_CAN_GIMBAL_REPORT_ACK_FRAME_ID (0x0au)
#define UWRT_MARS_ROVER_CAN_GIMBAL_REPORT_FAULTS_FRAME_ID (0x09u)
#define UWRT_MARS_ROVER_CAN_GIMBAL_SET_CONTROL_MODE_FRAME_ID (0x08u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_ACK_FRAME_ID (0x0du)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_FRAME_ID (0x0cu)
#define UWRT_MARS_ROVER_CAN_PDB_SET_LED_MATRIX_FRAME_ID (0x0bu)
#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_ACK_FRAME_ID (0x07u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_FAULTS_FRAME_ID (0x06u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_SET_CONTROL_MODE_FRAME_ID (0x05u)

/* Frame lengths in bytes. */
#define UWRT_MARS_ROVER_CAN_ALL_SWITCH_CAN_BUS_LENGTH (1u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_ACK_LENGTH (1u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_LENGTH (3u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_LENGTH (3u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_MOTION_DATA_LENGTH (8u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_PID_PARAMS_LENGTH (8u)
#define UWRT_MARS_ROVER_CAN_GIMBAL_REPORT_ACK_LENGTH (1u)
#define UWRT_MARS_ROVER_CAN_GIMBAL_REPORT_FAULTS_LENGTH (1u)
#define UWRT_MARS_ROVER_CAN_GIMBAL_SET_CONTROL_MODE_LENGTH (1u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_ACK_LENGTH (1u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_LENGTH (2u)
#define UWRT_MARS_ROVER_CAN_PDB_SET_LED_MATRIX_LENGTH (1u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_ACK_LENGTH (1u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_FAULTS_LENGTH (1u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_SET_CONTROL_MODE_LENGTH (1u)

/* Extended or standard frame types. */
#define UWRT_MARS_ROVER_CAN_ALL_SWITCH_CAN_BUS_IS_EXTENDED (0)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_ACK_IS_EXTENDED (0)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_IS_EXTENDED (0)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_IS_EXTENDED (0)
#define UWRT_MARS_ROVER_CAN_ARM_SET_MOTION_DATA_IS_EXTENDED (0)
#define UWRT_MARS_ROVER_CAN_ARM_SET_PID_PARAMS_IS_EXTENDED (0)
#define UWRT_MARS_ROVER_CAN_GIMBAL_REPORT_ACK_IS_EXTENDED (0)
#define UWRT_MARS_ROVER_CAN_GIMBAL_REPORT_FAULTS_IS_EXTENDED (0)
#define UWRT_MARS_ROVER_CAN_GIMBAL_SET_CONTROL_MODE_IS_EXTENDED (0)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_ACK_IS_EXTENDED (0)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_IS_EXTENDED (0)
#define UWRT_MARS_ROVER_CAN_PDB_SET_LED_MATRIX_IS_EXTENDED (0)
#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_ACK_IS_EXTENDED (0)
#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_FAULTS_IS_EXTENDED (0)
#define UWRT_MARS_ROVER_CAN_SCIENCE_SET_CONTROL_MODE_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */
#define UWRT_MARS_ROVER_CAN_ALL_SWITCH_CAN_BUS_ALL_CAN_BUS_ID_CAN1_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_ALL_SWITCH_CAN_BUS_ALL_CAN_BUS_ID_CAN2_CHOICE (1u)
#define UWRT_MARS_ROVER_CAN_ALL_SWITCH_CAN_BUS_ALL_CAN_BUS_ID_SNA_CHOICE (3u)

#define UWRT_MARS_ROVER_CAN_ARM_REPORT_ACK_ARM_ACK_ARM_RESET_ACK_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_ACK_ARM_ACK_ARM_SET_CONTROL_MODE_ACK_CHOICE (1u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_ACK_ARM_ACK_ARM_SET_TURNTABLE_PID_PARAMS_ACK_CHOICE (2u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_ACK_ARM_ACK_ARM_SET_SHOULDER_PID_PARAMS_ACK_CHOICE (3u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_ACK_ARM_ACK_ARM_SET_ELBOW_PID_PARAMS_ACK_CHOICE (4u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_ACK_ARM_ACK_ARM_SET_LEFT_WRIST_PID_PARAMS_ACK_CHOICE (5u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_ACK_ARM_ACK_ARM_SET_RIGHT_WRIST_PID_PARAMS_ACK_CHOICE (6u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_ACK_ARM_ACK_ARM_SET_CLAW_PID_PARAMS_ACK_CHOICE (7u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_ACK_ARM_ACK_CAN_BUS_SWITCH_ACK_CHOICE (8u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_ACK_ARM_ACK_SNA_CHOICE (255u)

#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_TURNTABLE_ENCODER_STATE_OPERATIONAL_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_TURNTABLE_ENCODER_STATE_FAULT_CHOICE (1u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_TURNTABLE_ENCODER_STATE_SNA_CHOICE (3u)

#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_TURNTABLE_CURRENT_SENSOR_STATE_OPERATIONAL_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_TURNTABLE_CURRENT_SENSOR_STATE_FAULT_CHOICE (1u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_TURNTABLE_CURRENT_SENSOR_STATE_SNA_CHOICE (3u)

#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_SHOULDER_ENCODER_STATE_OPERATIONAL_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_SHOULDER_ENCODER_STATE_FAULT_CHOICE (1u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_SHOULDER_ENCODER_STATE_SNA_CHOICE (3u)

#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_SHOULDER_CURRENT_SENSOR_STATE_OPERATIONAL_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_SHOULDER_CURRENT_SENSOR_STATE_FAULT_CHOICE (1u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_SHOULDER_CURRENT_SENSOR_STATE_SNA_CHOICE (3u)

#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_ELBOW_ENCODER_STATE_OPERATIONAL_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_ELBOW_ENCODER_STATE_FAULT_CHOICE (1u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_ELBOW_ENCODER_STATE_SNA_CHOICE (3u)

#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_ELBOW_CURRENT_SENSOR_STATE_OPERATIONAL_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_ELBOW_CURRENT_SENSOR_STATE_FAULT_CHOICE (1u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_ELBOW_CURRENT_SENSOR_STATE_SNA_CHOICE (3u)

#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_LEFT_WRIST_ENCODER_STATE_OPERATIONAL_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_LEFT_WRIST_ENCODER_STATE_FAULT_CHOICE (1u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_LEFT_WRIST_ENCODER_STATE_SNA_CHOICE (3u)

#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_LEFT_WRIST_CURRENT_SENSOR_STATE_OPERATIONAL_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_LEFT_WRIST_CURRENT_SENSOR_STATE_FAULT_CHOICE (1u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_LEFT_WRIST_CURRENT_SENSOR_STATE_SNA_CHOICE (3u)

#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_RIGHT_WRIST_ENCODER_STATE_OPERATIONAL_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_RIGHT_WRIST_ENCODER_STATE_FAULT_CHOICE (1u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_RIGHT_WRIST_ENCODER_STATE_SNA_CHOICE (3u)

#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_RIGHT_WRIST_CURRENT_SENSOR_STATE_OPERATIONAL_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_RIGHT_WRIST_CURRENT_SENSOR_STATE_FAULT_CHOICE (1u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_RIGHT_WRIST_CURRENT_SENSOR_STATE_SNA_CHOICE (3u)

#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_CLAW_ENCODER_STATE_OPERATIONAL_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_CLAW_ENCODER_STATE_FAULT_CHOICE (1u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_CLAW_ENCODER_STATE_SNA_CHOICE (3u)

#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_CLAW_CURRENT_SENSOR_STATE_OPERATIONAL_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_CLAW_CURRENT_SENSOR_STATE_FAULT_CHOICE (1u)
#define UWRT_MARS_ROVER_CAN_ARM_REPORT_FAULTS_ARM_CLAW_CURRENT_SENSOR_STATE_SNA_CHOICE (3u)

#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_TURNTABLE_CONTROL_MODE_OPEN_LOOP_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_TURNTABLE_CONTROL_MODE_POSITION_CHOICE (1u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_TURNTABLE_CONTROL_MODE_VELOCITY_CHOICE (2u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_TURNTABLE_CONTROL_MODE_CURRENT_CHOICE (3u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_TURNTABLE_CONTROL_MODE_SNA_CHOICE (7u)

#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_SHOULDER_CONTROL_MODE_OPEN_LOOP_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_SHOULDER_CONTROL_MODE_POSITION_CHOICE (1u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_SHOULDER_CONTROL_MODE_VELOCITY_CHOICE (2u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_SHOULDER_CONTROL_MODE_CURRENT_CHOICE (3u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_SHOULDER_CONTROL_MODE_SNA_CHOICE (7u)

#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_ELBOW_CONTROL_MODE_OPEN_LOOP_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_ELBOW_CONTROL_MODE_POSITION_CHOICE (1u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_ELBOW_CONTROL_MODE_VELOCITY_CHOICE (2u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_ELBOW_CONTROL_MODE_CURRENT_CHOICE (3u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_ELBOW_CONTROL_MODE_SNA_CHOICE (7u)

#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_LEFT_WRIST_CONTROL_MODE_OPEN_LOOP_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_LEFT_WRIST_CONTROL_MODE_POSITION_CHOICE (1u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_LEFT_WRIST_CONTROL_MODE_VELOCITY_CHOICE (2u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_LEFT_WRIST_CONTROL_MODE_CURRENT_CHOICE (3u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_LEFT_WRIST_CONTROL_MODE_SNA_CHOICE (7u)

#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_RIGHT_WRIST_CONTROL_MODE_OPEN_LOOP_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_RIGHT_WRIST_CONTROL_MODE_POSITION_CHOICE (1u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_RIGHT_WRIST_CONTROL_MODE_VELOCITY_CHOICE (2u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_RIGHT_WRIST_CONTROL_MODE_CURRENT_CHOICE (3u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_RIGHT_WRIST_CONTROL_MODE_SNA_CHOICE (7u)

#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_CLAW_CONTROL_MODE_OPEN_LOOP_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_CLAW_CONTROL_MODE_POSITION_CHOICE (1u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_CLAW_CONTROL_MODE_VELOCITY_CHOICE (2u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_CLAW_CONTROL_MODE_CURRENT_CHOICE (3u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_CONTROL_MODE_ARM_CLAW_CONTROL_MODE_SNA_CHOICE (7u)

#define UWRT_MARS_ROVER_CAN_ARM_SET_MOTION_DATA_ARM_TURNTABLE_MOTION_DATA_SNA_CHOICE (65535u)

#define UWRT_MARS_ROVER_CAN_ARM_SET_MOTION_DATA_ARM_SHOULDER_MOTION_DATA_SNA_CHOICE (65535u)

#define UWRT_MARS_ROVER_CAN_ARM_SET_PID_PARAMS_ARM_JOINT_ID_TURNTABLE_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_PID_PARAMS_ARM_JOINT_ID_SHOULDER_CHOICE (1u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_PID_PARAMS_ARM_JOINT_ID_ELBOW_CHOICE (2u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_PID_PARAMS_ARM_JOINT_ID_LEFT_WRIST_CHOICE (3u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_PID_PARAMS_ARM_JOINT_ID_RIGHT_WRIST_CHOICE (4u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_PID_PARAMS_ARM_JOINT_ID_CLAW_CHOICE (5u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_PID_PARAMS_ARM_JOINT_ID_SNA_CHOICE (7u)

#define UWRT_MARS_ROVER_CAN_ARM_SET_PID_PARAMS_ARM_PID_TUNING_MODE_POSITION_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_PID_PARAMS_ARM_PID_TUNING_MODE_VELOCITY_CHOICE (1u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_PID_PARAMS_ARM_PID_TUNING_MODE_CURRENT_CHOICE (2u)
#define UWRT_MARS_ROVER_CAN_ARM_SET_PID_PARAMS_ARM_PID_TUNING_MODE_SNA_CHOICE (3u)

#define UWRT_MARS_ROVER_CAN_ARM_SET_PID_PARAMS_ARM_PID_PROPORTIONAL_GAIN_SNA_CHOICE (4095u)

#define UWRT_MARS_ROVER_CAN_ARM_SET_PID_PARAMS_ARM_PID_INTEGRAL_GAIN_SNA_CHOICE (4095u)

#define UWRT_MARS_ROVER_CAN_ARM_SET_PID_PARAMS_ARM_PID_DERIVATIVE_GAIN_SNA_CHOICE (4095u)

#define UWRT_MARS_ROVER_CAN_ARM_SET_PID_PARAMS_ARM_PID_DEADZONE_SNA_CHOICE (65535u)

#define UWRT_MARS_ROVER_CAN_GIMBAL_REPORT_ACK_GIMBAL_ACK_GIMBAL_SET_CONTROL_MODE_ACK_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_GIMBAL_REPORT_ACK_GIMBAL_ACK_CAN_BUS_SWITCH_ACK_CHOICE (1u)
#define UWRT_MARS_ROVER_CAN_GIMBAL_REPORT_ACK_GIMBAL_ACK_SNA_CHOICE (255u)

#define UWRT_MARS_ROVER_CAN_GIMBAL_REPORT_FAULTS_GIMBAL_PAN_ENCODER_STATE_OPERATIONAL_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_GIMBAL_REPORT_FAULTS_GIMBAL_PAN_ENCODER_STATE_FAULT_CHOICE (1u)
#define UWRT_MARS_ROVER_CAN_GIMBAL_REPORT_FAULTS_GIMBAL_PAN_ENCODER_STATE_SNA_CHOICE (3u)

#define UWRT_MARS_ROVER_CAN_GIMBAL_SET_CONTROL_MODE_GIMBAL_PAN_CONTROL_MODE_OPEN_LOOP_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_GIMBAL_SET_CONTROL_MODE_GIMBAL_PAN_CONTROL_MODE_POSITION_CHOICE (1u)
#define UWRT_MARS_ROVER_CAN_GIMBAL_SET_CONTROL_MODE_GIMBAL_PAN_CONTROL_MODE_VELOCITY_CHOICE (2u)
#define UWRT_MARS_ROVER_CAN_GIMBAL_SET_CONTROL_MODE_GIMBAL_PAN_CONTROL_MODE_SNA_CHOICE (3u)

#define UWRT_MARS_ROVER_CAN_PDB_REPORT_ACK_PDB_ACK_PDB_SET_LED_MATRIX_ACK_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_ACK_PDB_ACK_CAN_BUS_SWITCH_ACK_CHOICE (1u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_ACK_PDB_ACK_SNA_CHOICE (255u)

#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_PDB_JETSON_STATUS_OPERATIONAL_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_PDB_JETSON_STATUS_FAULT_CHOICE (1u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_PDB_JETSON_STATUS_SNA_CHOICE (3u)

#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_PDB_ARM_POWER_STATUS_OPERATIONAL_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_PDB_ARM_POWER_STATUS_FAULT_CHOICE (1u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_PDB_ARM_POWER_STATUS_SNA_CHOICE (3u)

#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_PDB_SCIENCE_POWER_STATUS_OPERATIONAL_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_PDB_SCIENCE_POWER_STATUS_FAULT_CHOICE (1u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_PDB_SCIENCE_POWER_STATUS_SNA_CHOICE (3u)

#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_PDB_GIMBAL_POWER_STATUS_OPERATIONAL_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_PDB_GIMBAL_POWER_STATUS_FAULT_CHOICE (1u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_PDB_GIMBAL_POWER_STATUS_SNA_CHOICE (3u)

#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_PDB_VBAT_RAIL_STATUS_OPERATIONAL_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_PDB_VBAT_RAIL_STATUS_OVERVOLTAGE_CHOICE (1u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_PDB_VBAT_RAIL_STATUS_UNDERVOLTAGE_CHOICE (2u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_PDB_VBAT_RAIL_STATUS_SNA_CHOICE (3u)

#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_PDB_17_V_RAIL_STATUS_OPERATIONAL_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_PDB_17_V_RAIL_STATUS_OVERVOLTAGE_CHOICE (1u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_PDB_17_V_RAIL_STATUS_UNDERVOLTAGE_CHOICE (2u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_PDB_17_V_RAIL_STATUS_SNA_CHOICE (3u)

#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_PDB_5_V_RAIL_STATUS_OPERATIONAL_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_PDB_5_V_RAIL_STATUS_OVERVOLTAGE_CHOICE (1u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_PDB_5_V_RAIL_STATUS_UNDERVOLTAGE_CHOICE (2u)
#define UWRT_MARS_ROVER_CAN_PDB_REPORT_FAULTS_PDB_5_V_RAIL_STATUS_SNA_CHOICE (3u)

#define UWRT_MARS_ROVER_CAN_PDB_SET_LED_MATRIX_PDB_LED_MATRIX_STATE_SOLID_RED_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_PDB_SET_LED_MATRIX_PDB_LED_MATRIX_STATE_SOLID_BLUE_CHOICE (1u)
#define UWRT_MARS_ROVER_CAN_PDB_SET_LED_MATRIX_PDB_LED_MATRIX_STATE_FLASHING_GREEN_CHOICE (2u)
#define UWRT_MARS_ROVER_CAN_PDB_SET_LED_MATRIX_PDB_LED_MATRIX_STATE_FALSE_CHOICE (3u)
#define UWRT_MARS_ROVER_CAN_PDB_SET_LED_MATRIX_PDB_LED_MATRIX_STATE_SNA_CHOICE (7u)

#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_ACK_SCIENCE_ACK_SCIENCE_SET_CONTROL_MODE_ACK_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_ACK_SCIENCE_ACK_CAN_BUS_SWITCH_ACK_CHOICE (1u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_ACK_SCIENCE_ACK_SNA_CHOICE (255u)

#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_FAULTS_SCIENCE_GENEVA_ENCODER_STATE_OPERATIONAL_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_FAULTS_SCIENCE_GENEVA_ENCODER_STATE_FAULT_CHOICE (1u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_FAULTS_SCIENCE_GENEVA_ENCODER_STATE_SNA_CHOICE (3u)

#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_FAULTS_SCIENCE_ELEVATOR_ENCODER_STATE_OPERATIONAL_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_FAULTS_SCIENCE_ELEVATOR_ENCODER_STATE_FAULT_CHOICE (1u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_FAULTS_SCIENCE_ELEVATOR_ENCODER_STATE_SNA_CHOICE (3u)

#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_FAULTS_SCIENCE_MOISTURE_SENSOR_STATE_OPERATIONAL_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_FAULTS_SCIENCE_MOISTURE_SENSOR_STATE_FAULT_CHOICE (1u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_REPORT_FAULTS_SCIENCE_MOISTURE_SENSOR_STATE_SNA_CHOICE (3u)

#define UWRT_MARS_ROVER_CAN_SCIENCE_SET_CONTROL_MODE_SCIENCE_GENEVA_CONTROL_MODE_OPEN_LOOP_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_SET_CONTROL_MODE_SCIENCE_GENEVA_CONTROL_MODE_POSITION_CHOICE (1u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_SET_CONTROL_MODE_SCIENCE_GENEVA_CONTROL_MODE_VELOCITY_CHOICE (2u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_SET_CONTROL_MODE_SCIENCE_GENEVA_CONTROL_MODE_SNA_CHOICE (3u)

#define UWRT_MARS_ROVER_CAN_SCIENCE_SET_CONTROL_MODE_SCIENCE_ELEVATOR_CONTROL_MODE_OPEN_LOOP_CHOICE (0u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_SET_CONTROL_MODE_SCIENCE_ELEVATOR_CONTROL_MODE_POSITION_CHOICE (1u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_SET_CONTROL_MODE_SCIENCE_ELEVATOR_CONTROL_MODE_VELOCITY_CHOICE (2u)
#define UWRT_MARS_ROVER_CAN_SCIENCE_SET_CONTROL_MODE_SCIENCE_ELEVATOR_CONTROL_MODE_SNA_CHOICE (3u)

/**
 * Signals in message ALL_switchCANBus.
 *
 * Notifies all boards to switch to the specified CAN bus in the dual-bus system
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_all_switch_can_bus_t {
    /**
     * CAN bus ID
     *
     * Range: 0..2 (0.0..2.0 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t all_can_bus_id;
};

/**
 * Signals in message ARM_reportACK.
 *
 * Arm report ACKs to one-shot commands
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_arm_report_ack_t {
    /**
     * Arm ACKs
     *
     * Range: 0..254 (0.0..254.0 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t arm_ack;
};

/**
 * Signals in message ARM_reportFaults.
 *
 * Arm fault conditions
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_arm_report_faults_t {
    /**
     * Arm turntable encoder state
     *
     * Range: 0..2 (0.0..2.0 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t arm_turntable_encoder_state;

    /**
     * Arm turntable current sensor state
     *
     * Range: 0..2 (0.0..2.0 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t arm_turntable_current_sensor_state;

    /**
     * Arm shoulder encoder state
     *
     * Range: 0..2 (0.0..2.0 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t arm_shoulder_encoder_state;

    /**
     * Arm shoulder current sensor state
     *
     * Range: 0..2 (0.0..2.0 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t arm_shoulder_current_sensor_state;

    /**
     * Arm elbow encoder state
     *
     * Range: 0..2 (0.0..2.0 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t arm_elbow_encoder_state;

    /**
     * Arm elbow current sensor state
     *
     * Range: 0..2 (0.0..2.0 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t arm_elbow_current_sensor_state;

    /**
     * Arm left wrist encoder state
     *
     * Range: 0..2 (0.0..2.0 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t arm_left_wrist_encoder_state;

    /**
     * Arm left wrist current sensor state
     *
     * Range: 0..2 (0.0..2.0 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t arm_left_wrist_current_sensor_state;

    /**
     * Arm right wrist encoder state
     *
     * Range: 0..2 (0.0..2.0 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t arm_right_wrist_encoder_state;

    /**
     * Arm shoulder current sensor state
     *
     * Range: 0..2 (0.0..2.0 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t arm_right_wrist_current_sensor_state;

    /**
     * Arm claw encoder state
     *
     * Range: 0..2 (0.0..2.0 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t arm_claw_encoder_state;

    /**
     * Arm claw current sensor state
     *
     * Range: 0..2 (0.0..2.0 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t arm_claw_current_sensor_state;
};

/**
 * Signals in message ARM_setControlMode.
 *
 * Set control mode for arm joints
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_arm_set_control_mode_t {
    /**
     * Arm turntable control mode
     *
     * Range: 0..6 (0.0..6.0 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t arm_turntable_control_mode;

    /**
     * Arm shoulder control mode
     *
     * Range: 0..6 (0.0..6.0 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t arm_shoulder_control_mode;

    /**
     * Arm elbow control mode
     *
     * Range: 0..6 (0.0..6.0 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t arm_elbow_control_mode;

    /**
     * Arm left wrist control mode
     *
     * Range: 0..6 (0.0..6.0 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t arm_left_wrist_control_mode;

    /**
     * Arm right wrist control mode
     *
     * Range: 0..6 (0.0..6.0 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t arm_right_wrist_control_mode;

    /**
     * Arm claw control mode
     *
     * Range: 0..6 (0.0..6.0 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t arm_claw_control_mode;
};

/**
 * Signals in message ARM_setMotionData.
 *
 * Set motion data for arm joints
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_arm_set_motion_data_t {
    /**
     * Arm turntable motion data
     *
     * Range: 0..65534.00000000000063803902400 (0.0..10.0 radians)
     * Scale: 0.00015259254737998596
     * Offset: 0.0
     */
    uint16_t arm_turntable_motion_data;

    /**
     * Arm shoulder motion data
     *
     * Range: 0..65534.00000000000063803902400 (-5.0..5.0 radians)
     * Scale: 0.00015259254737998596
     * Offset: -5.0
     */
    uint16_t arm_shoulder_motion_data;
};

/**
 * Signals in message ARM_setPIDParams.
 *
 * Set arm turntable PID parameters
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_arm_set_pid_params_t {
    /**
     * Arm joint ID
     *
     * Range: 0..6 (0.0..6.0 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t arm_joint_id;

    /**
     * Arm PID tuning mode
     *
     * Range: 0..0 (0.0..0.0 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t arm_pid_tuning_mode;

    /**
     * Arm PID proportional gain
     *
     * Range: 0..65534.00000000000493274418000 (0.0..10000.0 -)
     * Scale: 0.15259254737998595
     * Offset: 0.0
     */
    uint16_t arm_pid_proportional_gain;

    /**
     * Arm PID integral gain
     *
     * Range: 0..65534.00000000000493274418000 (0.0..10000.0 -)
     * Scale: 0.15259254737998595
     * Offset: 0.0
     */
    uint16_t arm_pid_integral_gain;

    /**
     * Arm PID derivative gain
     *
     * Range: 0..65534.00000000000493274418000 (0.0..10000.0 -)
     * Scale: 0.15259254737998595
     * Offset: 0.0
     */
    uint16_t arm_pid_derivative_gain;

    /**
     * Arm PID deadzone
     *
     * Range: 0..2046.000000000000029053200000 (0.0..100.0 -)
     * Scale: 0.04887585532746823
     * Offset: 0.0
     */
    uint16_t arm_pid_deadzone;
};

/**
 * Signals in message GIMBAL_reportACK.
 *
 * Gimbal report ACKs to one-shot commands
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_gimbal_report_ack_t {
    /**
     * Gimbal ACKs
     *
     * Range: 0..254 (0.0..254.0 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t gimbal_ack;
};

/**
 * Signals in message GIMBAL_reportFaults.
 *
 * Gimbal fault conditions
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_gimbal_report_faults_t {
    /**
     * Gimbal pan encoder state
     *
     * Range: 0..2 (0.0..2.0 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t gimbal_pan_encoder_state;
};

/**
 * Signals in message GIMBAL_setControlMode.
 *
 * Set control mode for gimbal joints
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_gimbal_set_control_mode_t {
    /**
     * Gimbal pan control mode
     *
     * Range: 0..2 (0.0..2.0 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t gimbal_pan_control_mode;
};

/**
 * Signals in message PDB_reportACK.
 *
 * PDB report ACKs to one-shot commands
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_pdb_report_ack_t {
    /**
     * PDB ACKs
     *
     * Range: 0..254 (0.0..254.0 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t pdb_ack;
};

/**
 * Signals in message PDB_reportFaults.
 *
 * PDB report fault conditions
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_pdb_report_faults_t {
    /**
     * PDB Jetson power status
     *
     * Range: 0..2 (0.0..2.0 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t pdb_jetson_status;

    /**
     * PDB arm power status
     *
     * Range: 0..2 (0.0..2.0 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t pdb_arm_power_status;

    /**
     * PDB science power status
     *
     * Range: 0..2 (0.0..2.0 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t pdb_science_power_status;

    /**
     * PDB gmibal power status
     *
     * Range: 0..2 (0.0..2.0 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t pdb_gimbal_power_status;

    /**
     * PDB VBAT rail status
     *
     * Range: 0..2 (0.0..2.0 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t pdb_vbat_rail_status;

    /**
     * PDB 17V rail status
     *
     * Range: 0..2 (0.0..2.0 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t pdb_17_v_rail_status;

    /**
     * PDB 5V rail status
     *
     * Range: 0..2 (0.0..2.0 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t pdb_5_v_rail_status;
};

/**
 * Signals in message PDB_setLEDMatrix.
 *
 * PDB set LED matrix state
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_pdb_set_led_matrix_t {
    /**
     * PDB LED matrix state
     *
     * Range: 0..6 (0.0..6.0 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t pdb_led_matrix_state;
};

/**
 * Signals in message SCIENCE_reportACK.
 *
 * Science report ACKs to one-shot commands
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_science_report_ack_t {
    /**
     * Science ACKs
     *
     * Range: 0..254 (0.0..254.0 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t science_ack;
};

/**
 * Signals in message SCIENCE_reportFaults.
 *
 * Science fault conditions
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_science_report_faults_t {
    /**
     * Science geneva mechanism encoder state
     *
     * Range: 0..2 (0.0..2.0 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t science_geneva_encoder_state;

    /**
     * Science elevator encoder state
     *
     * Range: 0..2 (0.0..2.0 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t science_elevator_encoder_state;

    /**
     * Science moisture sensor state
     *
     * Range: 0..2 (0.0..2.0 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t science_moisture_sensor_state;
};

/**
 * Signals in message SCIENCE_setControlMode.
 *
 * Set control mode for science joints
 *
 * All signal values are as on the CAN bus.
 */
struct uwrt_mars_rover_can_science_set_control_mode_t {
    /**
     * Science geneva mechanism control mode
     *
     * Range: 0..2 (0.0..2.0 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t science_geneva_control_mode;

    /**
     * Science elevator control mode
     *
     * Range: 0..2 (0.0..2.0 -)
     * Scale: 1.0
     * Offset: 0.0
     */
    uint8_t science_elevator_control_mode;
};

/**
 * Pack message ALL_switchCANBus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_all_switch_can_bus_pack(
    uint8_t *dst_p,
    const struct uwrt_mars_rover_can_all_switch_can_bus_t *src_p,
    size_t size);

/**
 * Unpack message ALL_switchCANBus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_all_switch_can_bus_unpack(
    struct uwrt_mars_rover_can_all_switch_can_bus_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_all_switch_can_bus_all_can_bus_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_all_switch_can_bus_all_can_bus_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_all_switch_can_bus_all_can_bus_id_is_in_range(uint8_t value);

/**
 * Pack message ARM_reportACK.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_arm_report_ack_pack(
    uint8_t *dst_p,
    const struct uwrt_mars_rover_can_arm_report_ack_t *src_p,
    size_t size);

/**
 * Unpack message ARM_reportACK.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_arm_report_ack_unpack(
    struct uwrt_mars_rover_can_arm_report_ack_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_arm_report_ack_arm_ack_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_report_ack_arm_ack_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_report_ack_arm_ack_is_in_range(uint8_t value);

/**
 * Pack message ARM_reportFaults.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_arm_report_faults_pack(
    uint8_t *dst_p,
    const struct uwrt_mars_rover_can_arm_report_faults_t *src_p,
    size_t size);

/**
 * Unpack message ARM_reportFaults.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_arm_report_faults_unpack(
    struct uwrt_mars_rover_can_arm_report_faults_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_arm_report_faults_arm_turntable_encoder_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_report_faults_arm_turntable_encoder_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_report_faults_arm_turntable_encoder_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_arm_report_faults_arm_turntable_current_sensor_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_report_faults_arm_turntable_current_sensor_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_report_faults_arm_turntable_current_sensor_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_arm_report_faults_arm_shoulder_encoder_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_report_faults_arm_shoulder_encoder_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_report_faults_arm_shoulder_encoder_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_arm_report_faults_arm_shoulder_current_sensor_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_report_faults_arm_shoulder_current_sensor_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_report_faults_arm_shoulder_current_sensor_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_arm_report_faults_arm_elbow_encoder_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_report_faults_arm_elbow_encoder_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_report_faults_arm_elbow_encoder_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_arm_report_faults_arm_elbow_current_sensor_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_report_faults_arm_elbow_current_sensor_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_report_faults_arm_elbow_current_sensor_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_arm_report_faults_arm_left_wrist_encoder_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_report_faults_arm_left_wrist_encoder_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_report_faults_arm_left_wrist_encoder_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_arm_report_faults_arm_left_wrist_current_sensor_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_report_faults_arm_left_wrist_current_sensor_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_report_faults_arm_left_wrist_current_sensor_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_arm_report_faults_arm_right_wrist_encoder_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_report_faults_arm_right_wrist_encoder_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_report_faults_arm_right_wrist_encoder_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_arm_report_faults_arm_right_wrist_current_sensor_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_report_faults_arm_right_wrist_current_sensor_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_report_faults_arm_right_wrist_current_sensor_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_arm_report_faults_arm_claw_encoder_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_report_faults_arm_claw_encoder_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_report_faults_arm_claw_encoder_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_arm_report_faults_arm_claw_current_sensor_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_report_faults_arm_claw_current_sensor_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_report_faults_arm_claw_current_sensor_state_is_in_range(uint8_t value);

/**
 * Pack message ARM_setControlMode.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_arm_set_control_mode_pack(
    uint8_t *dst_p,
    const struct uwrt_mars_rover_can_arm_set_control_mode_t *src_p,
    size_t size);

/**
 * Unpack message ARM_setControlMode.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_arm_set_control_mode_unpack(
    struct uwrt_mars_rover_can_arm_set_control_mode_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_arm_set_control_mode_arm_turntable_control_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_set_control_mode_arm_turntable_control_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_set_control_mode_arm_turntable_control_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_arm_set_control_mode_arm_shoulder_control_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_set_control_mode_arm_shoulder_control_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_set_control_mode_arm_shoulder_control_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_arm_set_control_mode_arm_elbow_control_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_set_control_mode_arm_elbow_control_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_set_control_mode_arm_elbow_control_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_arm_set_control_mode_arm_left_wrist_control_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_set_control_mode_arm_left_wrist_control_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_set_control_mode_arm_left_wrist_control_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_arm_set_control_mode_arm_right_wrist_control_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_set_control_mode_arm_right_wrist_control_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_set_control_mode_arm_right_wrist_control_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_arm_set_control_mode_arm_claw_control_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_set_control_mode_arm_claw_control_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_set_control_mode_arm_claw_control_mode_is_in_range(uint8_t value);

/**
 * Pack message ARM_setMotionData.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_arm_set_motion_data_pack(
    uint8_t *dst_p,
    const struct uwrt_mars_rover_can_arm_set_motion_data_t *src_p,
    size_t size);

/**
 * Unpack message ARM_setMotionData.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_arm_set_motion_data_unpack(
    struct uwrt_mars_rover_can_arm_set_motion_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t uwrt_mars_rover_can_arm_set_motion_data_arm_turntable_motion_data_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_set_motion_data_arm_turntable_motion_data_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_set_motion_data_arm_turntable_motion_data_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t uwrt_mars_rover_can_arm_set_motion_data_arm_shoulder_motion_data_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_set_motion_data_arm_shoulder_motion_data_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_set_motion_data_arm_shoulder_motion_data_is_in_range(uint16_t value);

/**
 * Pack message ARM_setPIDParams.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_arm_set_pid_params_pack(
    uint8_t *dst_p,
    const struct uwrt_mars_rover_can_arm_set_pid_params_t *src_p,
    size_t size);

/**
 * Unpack message ARM_setPIDParams.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_arm_set_pid_params_unpack(
    struct uwrt_mars_rover_can_arm_set_pid_params_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_arm_set_pid_params_arm_joint_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_set_pid_params_arm_joint_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_set_pid_params_arm_joint_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_arm_set_pid_params_arm_pid_tuning_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_set_pid_params_arm_pid_tuning_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_set_pid_params_arm_pid_tuning_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t uwrt_mars_rover_can_arm_set_pid_params_arm_pid_proportional_gain_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_set_pid_params_arm_pid_proportional_gain_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_set_pid_params_arm_pid_proportional_gain_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t uwrt_mars_rover_can_arm_set_pid_params_arm_pid_integral_gain_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_set_pid_params_arm_pid_integral_gain_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_set_pid_params_arm_pid_integral_gain_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t uwrt_mars_rover_can_arm_set_pid_params_arm_pid_derivative_gain_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_set_pid_params_arm_pid_derivative_gain_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_set_pid_params_arm_pid_derivative_gain_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t uwrt_mars_rover_can_arm_set_pid_params_arm_pid_deadzone_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_arm_set_pid_params_arm_pid_deadzone_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_arm_set_pid_params_arm_pid_deadzone_is_in_range(uint16_t value);

/**
 * Pack message GIMBAL_reportACK.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_gimbal_report_ack_pack(
    uint8_t *dst_p,
    const struct uwrt_mars_rover_can_gimbal_report_ack_t *src_p,
    size_t size);

/**
 * Unpack message GIMBAL_reportACK.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_gimbal_report_ack_unpack(
    struct uwrt_mars_rover_can_gimbal_report_ack_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_gimbal_report_ack_gimbal_ack_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_gimbal_report_ack_gimbal_ack_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_gimbal_report_ack_gimbal_ack_is_in_range(uint8_t value);

/**
 * Pack message GIMBAL_reportFaults.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_gimbal_report_faults_pack(
    uint8_t *dst_p,
    const struct uwrt_mars_rover_can_gimbal_report_faults_t *src_p,
    size_t size);

/**
 * Unpack message GIMBAL_reportFaults.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_gimbal_report_faults_unpack(
    struct uwrt_mars_rover_can_gimbal_report_faults_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_gimbal_report_faults_gimbal_pan_encoder_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_gimbal_report_faults_gimbal_pan_encoder_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_gimbal_report_faults_gimbal_pan_encoder_state_is_in_range(uint8_t value);

/**
 * Pack message GIMBAL_setControlMode.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_gimbal_set_control_mode_pack(
    uint8_t *dst_p,
    const struct uwrt_mars_rover_can_gimbal_set_control_mode_t *src_p,
    size_t size);

/**
 * Unpack message GIMBAL_setControlMode.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_gimbal_set_control_mode_unpack(
    struct uwrt_mars_rover_can_gimbal_set_control_mode_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_gimbal_set_control_mode_gimbal_pan_control_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_gimbal_set_control_mode_gimbal_pan_control_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_gimbal_set_control_mode_gimbal_pan_control_mode_is_in_range(uint8_t value);

/**
 * Pack message PDB_reportACK.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_pdb_report_ack_pack(
    uint8_t *dst_p,
    const struct uwrt_mars_rover_can_pdb_report_ack_t *src_p,
    size_t size);

/**
 * Unpack message PDB_reportACK.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_pdb_report_ack_unpack(
    struct uwrt_mars_rover_can_pdb_report_ack_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_pdb_report_ack_pdb_ack_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_pdb_report_ack_pdb_ack_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_pdb_report_ack_pdb_ack_is_in_range(uint8_t value);

/**
 * Pack message PDB_reportFaults.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_pdb_report_faults_pack(
    uint8_t *dst_p,
    const struct uwrt_mars_rover_can_pdb_report_faults_t *src_p,
    size_t size);

/**
 * Unpack message PDB_reportFaults.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_pdb_report_faults_unpack(
    struct uwrt_mars_rover_can_pdb_report_faults_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_pdb_report_faults_pdb_jetson_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_pdb_report_faults_pdb_jetson_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_pdb_report_faults_pdb_jetson_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_pdb_report_faults_pdb_arm_power_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_pdb_report_faults_pdb_arm_power_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_pdb_report_faults_pdb_arm_power_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_pdb_report_faults_pdb_science_power_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_pdb_report_faults_pdb_science_power_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_pdb_report_faults_pdb_science_power_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_pdb_report_faults_pdb_gimbal_power_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_pdb_report_faults_pdb_gimbal_power_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_pdb_report_faults_pdb_gimbal_power_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_pdb_report_faults_pdb_vbat_rail_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_pdb_report_faults_pdb_vbat_rail_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_pdb_report_faults_pdb_vbat_rail_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_pdb_report_faults_pdb_17_v_rail_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_pdb_report_faults_pdb_17_v_rail_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_pdb_report_faults_pdb_17_v_rail_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_pdb_report_faults_pdb_5_v_rail_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_pdb_report_faults_pdb_5_v_rail_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_pdb_report_faults_pdb_5_v_rail_status_is_in_range(uint8_t value);

/**
 * Pack message PDB_setLEDMatrix.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_pdb_set_led_matrix_pack(
    uint8_t *dst_p,
    const struct uwrt_mars_rover_can_pdb_set_led_matrix_t *src_p,
    size_t size);

/**
 * Unpack message PDB_setLEDMatrix.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_pdb_set_led_matrix_unpack(
    struct uwrt_mars_rover_can_pdb_set_led_matrix_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_pdb_set_led_matrix_pdb_led_matrix_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_pdb_set_led_matrix_pdb_led_matrix_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_pdb_set_led_matrix_pdb_led_matrix_state_is_in_range(uint8_t value);

/**
 * Pack message SCIENCE_reportACK.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_science_report_ack_pack(
    uint8_t *dst_p,
    const struct uwrt_mars_rover_can_science_report_ack_t *src_p,
    size_t size);

/**
 * Unpack message SCIENCE_reportACK.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_science_report_ack_unpack(
    struct uwrt_mars_rover_can_science_report_ack_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_science_report_ack_science_ack_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_science_report_ack_science_ack_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_science_report_ack_science_ack_is_in_range(uint8_t value);

/**
 * Pack message SCIENCE_reportFaults.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_science_report_faults_pack(
    uint8_t *dst_p,
    const struct uwrt_mars_rover_can_science_report_faults_t *src_p,
    size_t size);

/**
 * Unpack message SCIENCE_reportFaults.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_science_report_faults_unpack(
    struct uwrt_mars_rover_can_science_report_faults_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_science_report_faults_science_geneva_encoder_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_science_report_faults_science_geneva_encoder_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_science_report_faults_science_geneva_encoder_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_science_report_faults_science_elevator_encoder_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_science_report_faults_science_elevator_encoder_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_science_report_faults_science_elevator_encoder_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_science_report_faults_science_moisture_sensor_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_science_report_faults_science_moisture_sensor_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_science_report_faults_science_moisture_sensor_state_is_in_range(uint8_t value);

/**
 * Pack message SCIENCE_setControlMode.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int uwrt_mars_rover_can_science_set_control_mode_pack(
    uint8_t *dst_p,
    const struct uwrt_mars_rover_can_science_set_control_mode_t *src_p,
    size_t size);

/**
 * Unpack message SCIENCE_setControlMode.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int uwrt_mars_rover_can_science_set_control_mode_unpack(
    struct uwrt_mars_rover_can_science_set_control_mode_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_science_set_control_mode_science_geneva_control_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_science_set_control_mode_science_geneva_control_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_science_set_control_mode_science_geneva_control_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t uwrt_mars_rover_can_science_set_control_mode_science_elevator_control_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double uwrt_mars_rover_can_science_set_control_mode_science_elevator_control_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool uwrt_mars_rover_can_science_set_control_mode_science_elevator_control_mode_is_in_range(uint8_t value);


#ifdef __cplusplus
}
#endif

#endif
